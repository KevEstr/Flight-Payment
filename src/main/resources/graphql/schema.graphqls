type Query {
    findPaymentById(payment_id: ID!) : Payment
    allPaymentMethods : [PaymentMethod!]!
    allGatewayPayment: [GatewayPayment!]!
    findTransactionById( id: ID!) : Transaction
    getPaymentMethodsByUserId( userId: ID!) : [PaymentMethodXUser!]!

}

type Mutation {
    createPayment(inputPayment : InputPayment!) : Payment
    createTransaction(inputTransaction : InputTransaction! ): Transaction
    updateTransactionStatus( transactionId : ID!, newStatus: Int!): Transaction
    createPaymentMethodXUser( inputPaymentMethodXUser: InputPaymentMethodXUser): PaymentMethodXUser

    deletePaymentMethodXUser ( paymentMethodXUserId: ID!) : String

    createMercadoPagoPreference(transactionId: ID!, amount: Int!): String

    createStripePaymentSession(transactionId: ID!): String

}

type Payment{
    payment_id: ID,
    date: String,
    transaction: Transaction,
    gateway: GatewayPayment,
}

type GatewayPayment{
    id: ID,
    name: String,
}

type PaymentMethod{
    id: ID!,
    name: String!,
}

type PaymentMethodXUser{
    id: ID,
    card_number: String,
    card_type: String
    expiry_date:String,
    ccv: String
}


type Transaction{
    id: ID,
    status: Int,
    date: String,
    total_price: Float,
    additional_charge: Float,
    paymentMethod : PaymentMethod,
    booking: Booking
}

type Flight{
    id: ID
}

type Booking{
    id: ID
    is_paid: Boolean
}

type User{
    id: ID
}

input InputPaymentMethodXUser{
    card_number: String,
    card_type: String
    expiry_date:String,
    ccv: String
    user_id: ID!,
    payment_method_id: ID!
}

input InputPayment {
    gateway_payment_id: ID
    transaction_id: ID!
}

input InputTransaction{
    additional_charge: Float
    booking_id: ID!,
    payment_method_id: ID!
}