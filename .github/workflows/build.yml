name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h ${{ services.postgres.host }} -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 30
          done

      # Check PostgreSQL status
      - name: Check PostgreSQL status
        run: |
          pg_isready -h ${{ services.postgres.host }} -p 5432 -U postgres
          if [ $? -ne 0 ]; then
            echo "PostgreSQL is not ready"
            exit 1
          fi

      # Run Tests with retry mechanism
      - name: Run Tests
        run: |
          retry=0
          max_retries=3
          while [ $retry -lt $max_retries ]; do
            mvn -B test
            if [ $? -eq 0 ]; then
              break
            fi
            retry=$((retry+1))
            echo "Retry $retry: Connection to PostgreSQL failed. Waiting 10 seconds..."
            sleep 10
          done
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://${{ services.postgres.host }}:5432/test_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  sonar:
    needs: tests
    name: SonarCloud analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Analyze with SonarCloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=mono789_Sprint2-Aerolines -Dsonar.organization=mono789 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}